---
# Ensure the primary master is ready first
- name: Ensure MicroK8s is running on primary master
  command: microk8s status --wait-ready
  changed_when: false
  when: inventory_hostname == groups['masters'][0]
  register: primary_status
  until: primary_status.rc == 0
  retries: 5
  delay: 10

# Use the private IP instead of getting it from the system
- name: Set primary node IP for joining
  set_fact:
    master_ip: "{{ hostvars[groups['masters'][0]]['private_ip'] }}"

- name: Display primary master IP
  debug:
    msg: "Primary master IP for joining: {{ master_ip }}"
  when: inventory_hostname == groups['masters'][0]

# Generate a fresh token for each joining node
- name: Generate join token for secondary masters
  shell: microk8s add-node --token-ttl 3600
  register: add_node_output
  changed_when: false
  when: inventory_hostname == groups['masters'][0]

- name: Display raw join token output
  debug:
    var: add_node_output.stdout_lines
  when: inventory_hostname == groups['masters'][0]

# Extract the join command EXACTLY as output
- name: Extract join command for other masters
  set_fact:
    master_join_command: "{{ add_node_output.stdout_lines | select('match', 'microk8s join.*') | list | first }}"
  when: inventory_hostname == groups['masters'][0] and add_node_output.stdout is defined

- name: Display extracted join command
  debug:
    msg: "Extracted join command: {{ master_join_command }}"
  when: inventory_hostname == groups['masters'][0] and master_join_command is defined

# Store join command in hostvars
- name: Store join command in hostvars
  set_fact:
    cluster_join_command: "{{ master_join_command }}"
  when: inventory_hostname == groups['masters'][0] and master_join_command is defined

# Get join command on secondary masters
- name: Get join command on secondary masters
  set_fact:
    master_join_command: "{{ hostvars[groups['masters'][0]]['cluster_join_command'] }}"
  when: inventory_hostname != groups['masters'][0]

- name: Debug join command on secondary masters
  debug:
    msg:
      - "Secondary master: {{ inventory_hostname }}"
      - "Private IP: {{ hostvars[inventory_hostname]['private_ip'] }}"
      - "Join command to execute: {{ master_join_command }}"
  when: inventory_hostname != groups['masters'][0]

# Check all known nodes on primary master
- name: Get current cluster nodes from primary master
  shell: "microk8s kubectl get nodes -o wide"
  register: current_nodes
  changed_when: false
  when: inventory_hostname == groups['masters'][0]

- name: Display current cluster nodes
  debug:
    var: current_nodes.stdout_lines
  when: inventory_hostname == groups['masters'][0]

# Check if node is already joined
- name: Check if node is already part of the cluster
  shell: "microk8s kubectl get nodes | grep {{ inventory_hostname }} || true"
  delegate_to: "{{ groups['masters'][0] }}"
  register: node_check
  changed_when: false
  when: inventory_hostname != groups['masters'][0]
  ignore_errors: yes

- name: Display node check result
  debug:
    msg: "Node check result for {{ inventory_hostname }}: {{ node_check.stdout }}"
  when: inventory_hostname != groups['masters'][0]

# Join secondary masters to the cluster
- name: Join secondary masters to the cluster
  shell: "{{ master_join_command }}"
  register: join_result
  failed_when:
    - join_result.rc != 0
    - "'already exists' not in join_result.stderr|default('')"
    - "'already known to dqlite' not in join_result.stdout|default('')"
  changed_when: join_result.rc == 0
  when:
    - inventory_hostname != groups['masters'][0]
    - master_join_command is defined
    - not node_check.stdout

- name: Display join result
  debug:
    msg: "Join result: {{ join_result.stdout_lines|default([]) + join_result.stderr_lines|default([]) }}"
  when:
    - inventory_hostname != groups['masters'][0]
    - join_result is defined

- name: Wait for MicroK8s to be ready after joining
  command: microk8s status --wait-ready
  changed_when: false
  when: inventory_hostname != groups['masters'][0]
  register: join_status
  until: join_status.rc == 0
  retries: 10
  delay: 15

# Verification after join
- name: Verify node has joined the cluster (from primary master)
  shell: "microk8s kubectl get nodes | grep {{ inventory_hostname }}"
  delegate_to: "{{ groups['masters'][0] }}"
  register: node_verify
  changed_when: false
  when: inventory_hostname != groups['masters'][0]
  ignore_errors: yes
  retries: 3
  delay: 5
  until: node_verify.rc == 0

- name: Display verification result
  debug:
    msg: "Node verification from primary master: {{ node_verify.stdout }}"
  when: inventory_hostname != groups['masters'][0] and node_verify is defined

# Final check of cluster status after all joins
- name: Get final cluster status
  shell: "microk8s kubectl get nodes -o wide"
  register: final_nodes
  changed_when: false
  when: inventory_hostname == groups['masters'][0]

- name: Display final cluster status
  debug:
    var: final_nodes.stdout_lines
  when: inventory_hostname == groups['masters'][0]
