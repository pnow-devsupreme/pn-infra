---
# Ensure the primary master is ready first
- name: Ensure MicroK8s is running on primary master
  command: microk8s status --wait-ready
  changed_when: false
  when: inventory_hostname == groups['masters'][0]
  register: primary_status
  until: primary_status.rc == 0
  retries: 5
  delay: 10

# Use the primary master's private IP
- name: Set primary node IP for joining
  set_fact:
    master_ip: "{{ hostvars[groups['masters'][0]]['private_ip'] }}"
  when: inventory_hostname == groups['masters'][0]

# Generate a fresh token for worker nodes
- name: Generate worker join token
  command: microk8s add-node --token-ttl 3600
  register: worker_add_node_output
  changed_when: false
  when: inventory_hostname == groups['masters'][0]

- name: Display worker join token info
  debug:
    msg: "Worker join token info: {{ worker_add_node_output.stdout_lines }}"
  when: inventory_hostname == groups['masters'][0]

- name: Extract join command for workers
  set_fact:
    worker_join_command: >-
      {{ worker_add_node_output.stdout_lines | select('match', 'microk8s join.*') | first }} --worker
  when: inventory_hostname == groups['masters'][0] and worker_add_node_output.stdout is defined

# Replace any IP in the join command with the correct private IP
- name: Update join command with correct private IP
  set_fact:
    worker_join_command: "{{ worker_join_command | regex_replace('[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+', master_ip) }}"
  when: inventory_hostname == groups['masters'][0] and worker_join_command is defined

# Check if worker node is already joined
- name: Check if worker node is already part of the cluster
  shell: "microk8s kubectl get nodes | grep $(hostname) || true"
  register: worker_node_check
  changed_when: false
  when: inventory_hostname in groups['workers']
  ignore_errors: yes
  delegate_to: "{{ groups['masters'][0] }}"

- name: Join workers to the cluster
  command: "{{ hostvars[groups['masters'][0]]['worker_join_command'] }}"
  register: worker_join_result
  failed_when: >
    worker_join_result.rc != 0 and 
    'already exists' not in worker_join_result.stderr and 
    'already known to dqlite' not in worker_join_result.stdout
  changed_when: worker_join_result.rc == 0
  when:
    - inventory_hostname in groups['workers']
    - hostvars[groups['masters'][0]]['worker_join_command'] is defined
    - worker_node_check.stdout == ""
