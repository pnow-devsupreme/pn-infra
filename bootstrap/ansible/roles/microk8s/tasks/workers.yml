---
# Ensure the primary master is ready first
- name: Ensure MicroK8s is running on primary master
  command: microk8s status --wait-ready
  changed_when: false
  when: inventory_hostname == groups['masters'][0]
  register: primary_status
  until: primary_status.rc == 0
  retries: 5
  delay: 10

# Use the primary master's private IP
- name: Set primary node IP for joining
  set_fact:
    master_ip: "{{ hostvars[groups['masters'][0]]['private_ip'] }}"

# Generate a fresh token for worker nodes
- name: Generate worker join token
  shell: microk8s add-node --token-ttl 3600
  register: worker_add_node_output
  changed_when: false
  when: inventory_hostname == groups['masters'][0]

- name: Display worker join token info
  debug:
    var: worker_add_node_output.stdout_lines
  when: inventory_hostname == groups['masters'][0]

# Extract the complete join command for workers
- name: Extract join command for workers
  set_fact:
    worker_join_command: "{{ worker_add_node_output.stdout_lines | select('match', 'microk8s join.*') | list | first }} --worker"
  when: inventory_hostname == groups['masters'][0] and worker_add_node_output.stdout is defined

- name: Display worker join command
  debug:
    msg: "Worker join command: {{ worker_join_command }}"
  when: inventory_hostname == groups['masters'][0] and worker_join_command is defined

# Store worker join command in hostvars
- name: Store worker join command in hostvars
  set_fact:
    cluster_worker_join_command: "{{ worker_join_command }}"
  when: inventory_hostname == groups['masters'][0] and worker_join_command is defined

# Get current cluster nodes before joining
- name: Get current cluster nodes from primary master
  shell: "microk8s kubectl get nodes -o wide"
  register: current_worker_nodes
  changed_when: false
  when: inventory_hostname == groups['masters'][0]

- name: Display current cluster nodes before worker join
  debug:
    var: current_worker_nodes.stdout_lines
  when: inventory_hostname == groups['masters'][0]

# Check if worker node is already joined
- name: Check if worker node is already part of the cluster
  shell: "microk8s kubectl get nodes | grep {{ inventory_hostname }} || true"
  delegate_to: "{{ groups['masters'][0] }}"
  register: worker_node_check
  changed_when: false
  when: inventory_hostname in groups['workers']
  ignore_errors: yes

- name: Display worker node check result
  debug:
    msg: "Worker node check for {{ inventory_hostname }}: {{ worker_node_check.stdout }}"
  when: inventory_hostname in groups['workers']

# Join workers to the cluster
- name: Join workers to the cluster
  shell: "{{ hostvars[groups['masters'][0]]['cluster_worker_join_command'] }}"
  register: worker_join_result
  failed_when: >
    worker_join_result.rc != 0 and 
    'already exists' not in worker_join_result.stderr|default('') and 
    'already known to dqlite' not in worker_join_result.stdout|default('')
  changed_when: worker_join_result.rc == 0
  when:
    - inventory_hostname in groups['workers']
    - hostvars[groups['masters'][0]]['cluster_worker_join_command'] is defined
    - not worker_node_check.stdout

- name: Display worker join result
  debug:
    msg: "Worker join result for {{ inventory_hostname }}: {{ worker_join_result.stdout_lines|default([]) + worker_join_result.stderr_lines|default([]) }}"
  when:
    - inventory_hostname in groups['workers']
    - worker_join_result is defined

# Verify worker node has joined the cluster
- name: Verify worker has joined the cluster (from primary master)
  shell: "microk8s kubectl get nodes | grep {{ inventory_hostname }}"
  delegate_to: "{{ groups['masters'][0] }}"
  register: worker_verify
  changed_when: false
  when: inventory_hostname in groups['workers']
  ignore_errors: yes
  retries: 3
  delay: 5
  until: worker_verify.rc == 0

- name: Display worker verification result
  debug:
    msg: "Worker node verification from primary master: {{ worker_verify.stdout }}"
  when: inventory_hostname in groups['workers'] and worker_verify is defined

# Final check of cluster status after all worker joins
- name: Get final cluster status with workers
  shell: "microk8s kubectl get nodes -o wide"
  register: final_worker_nodes
  changed_when: false
  when: inventory_hostname == groups['masters'][0]
  run_once: true

- name: Display final cluster status with workers
  debug:
    var: final_worker_nodes.stdout_lines
  when: inventory_hostname == groups['masters'][0]
  run_once: true
