---
- name: Complete reset of all nodes
  hosts: all
  become: yes
  gather_facts: true
  tasks:
    - name: Create cleanup scripts directory
      file:
        path: /tmp/cleanup-scripts
        state: directory
        mode: "0755"

    - name: Create safe iptables cleanup script
      copy:
        dest: /tmp/cleanup-scripts/safe-iptables-cleanup.sh
        mode: "0755"
        content: |
          #!/bin/bash
          # Script to safely flush iptables and establish basic rules

          # First, create a backup of current rules in case something goes wrong
          BACKUP_DIR="/opt/firewall_backups/$(date +%Y-%m-%d-%H-%M-%S)"
          mkdir -p $BACKUP_DIR
          iptables-save > $BACKUP_DIR/iptables.rules.bak
          ip6tables-save > $BACKUP_DIR/ip6tables.rules.bak
          echo "Backup created at $BACKUP_DIR"

          # For safety, this makes sure we don't get locked out by accepting SSH connections
          # before making any changes
          iptables -A INPUT -p tcp --dport 22 -j ACCEPT

          # Flush all existing rules and delete custom chains
          iptables -F
          iptables -X
          iptables -t nat -F
          iptables -t nat -X
          iptables -t mangle -F
          iptables -t mangle -X
          iptables -t raw -F
          iptables -t raw -X

          # Set default chain policies
          iptables -P INPUT DROP
          iptables -P FORWARD DROP
          iptables -P OUTPUT ACCEPT

          # Allow loopback traffic
          iptables -A INPUT -i lo -j ACCEPT
          iptables -A OUTPUT -o lo -j ACCEPT

          # Allow established and related connections
          iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

          # Allow SSH (port 22)
          iptables -A INPUT -p tcp --dport 22 -j ACCEPT

          # Allow HTTP (port 80)
          iptables -A INPUT -p tcp --dport 80 -j ACCEPT

          # Allow HTTPS (port 443)
          iptables -A INPUT -p tcp --dport 443 -j ACCEPT

          # Optional: Allow ping (ICMP)
          iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT

          # Save the new ruleset
          if [ -d "/etc/iptables" ]; then
            iptables-save > /etc/iptables/rules.v4
          fi

          echo "iptables rules have been flushed and basic rules restored."
          echo "SSH (22), HTTP (80), and HTTPS (443) are now allowed."

    - name: Create MicroK8s cleanup script
      copy:
        dest: /tmp/cleanup-scripts/microk8s-cleanup.sh
        mode: "0755"
        content: |
          #!/bin/bash

          # Microk8s Complete Cleanup Script
          # Run this script with sudo for complete cleanup

          set -e  # Exit on error

          # ANSI color codes for better readability
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[0;33m'
          NC='\033[0m' # No Color

          echo -e "${YELLOW}Starting Microk8s cleanup process...${NC}"

          # Function to safely remove directories/files
          safe_remove() {
              if [ -e "$1" ]; then
                  echo -e "${YELLOW}Removing $1${NC}"
                  rm -rf "$1"
              fi
          }

          # Function to remove snap-related Microk8s remnants
          remove_snap_microk8s() {
              echo -e "${YELLOW}Removing any remaining snap microk8s packages...${NC}"
              snap remove --purge microk8s 2>/dev/null || true
              
              # Remove snap data directories
              safe_remove "/var/snap/microk8s"
              safe_remove "/snap/microk8s"
              
              # Remove cached archives
              safe_remove "/var/lib/snapd/cache/microk8s"
          }

          # Function to clean up systemd and services
          cleanup_systemd() {
              echo -e "${YELLOW}Cleaning up systemd services...${NC}"
              systemctl stop snap.microk8s.daemon-containerd 2>/dev/null || true
              systemctl stop snap.microk8s.daemon-kubelet 2>/dev/null || true
              systemctl stop snap.microk8s.daemon-apiserver 2>/dev/null || true
              systemctl stop snap.microk8s.daemon-scheduler 2>/dev/null || true
              systemctl stop snap.microk8s.daemon-controller-manager 2>/dev/null || true
              systemctl stop snap.microk8s.daemon-proxy 2>/dev/null || true
              systemctl stop snap.microk8s.daemon-etcd 2>/dev/null || true
              
              # Disable services
              systemctl disable snap.microk8s.daemon-containerd 2>/dev/null || true
              systemctl disable snap.microk8s.daemon-kubelet 2>/dev/null || true
              systemctl disable snap.microk8s.daemon-apiserver 2>/dev/null || true
              systemctl disable snap.microk8s.daemon-scheduler 2>/dev/null || true
              systemctl disable snap.microk8s.daemon-controller-manager 2>/dev/null || true
              systemctl disable snap.microk8s.daemon-proxy 2>/dev/null || true
              systemctl disable snap.microk8s.daemon-etcd 2>/dev/null || true
              
              # Remove systemd service files
              rm -f /etc/systemd/system/snap.microk8s.* 2>/dev/null || true
              
              # Reload systemd daemon
              systemctl daemon-reload
          }

          # Function to clean up network interfaces and configurations
          cleanup_network() {
              echo -e "${YELLOW}Cleaning up network interfaces and configurations...${NC}"
              
              # Remove CNI interfaces
              if ip link show cni0 &>/dev/null; then
                  ip link delete cni0
              fi
              
              if ip link show flannel.1 &>/dev/null; then
                  ip link delete flannel.1
              fi
              
              if ip link show calico1 &>/dev/null; then
                  ip link delete calico1
              fi
          }

          # Clean up user configuration
          cleanup_user_config() {
              echo -e "${YELLOW}Cleaning up user configuration...${NC}"
              safe_remove "$HOME/.kube"
              safe_remove "$HOME/.microk8s"
              safe_remove "/home/$SUDO_USER/.kube" 2>/dev/null || true
              safe_remove "/home/$SUDO_USER/.microk8s" 2>/dev/null || true
          }

          # Clean up remaining directories and files
          cleanup_remaining_files() {
              echo -e "${YELLOW}Cleaning up remaining directories and files...${NC}"
              
              # MicroK8s specific directories
              safe_remove "/var/lib/microk8s"
              safe_remove "/var/lib/containerd"
              safe_remove "/var/lib/calico"
              safe_remove "/var/lib/rook"
              safe_remove "/var/lib/etcd"
              safe_remove "/var/run/calico"
              safe_remove "/var/run/flannel"
              safe_remove "/etc/cni"
              safe_remove "/etc/calico"
              safe_remove "/etc/microk8s"
              safe_remove "/opt/cni/bin"
              
              # Remove any remaining CNI configuration
              safe_remove "/etc/cni/net.d"
          }

          # Clean up Docker remnants if any
          cleanup_docker_remnants() {
              echo -e "${YELLOW}Cleaning up Docker remnants if any...${NC}"
              
              # If Docker is installed, try to remove Microk8s related containers and images
              if command -v docker &>/dev/null; then
                  echo -e "${YELLOW}Docker found, attempting to clean up Microk8s containers...${NC}"
                  docker ps -a | grep -i "k8s" | awk '{print $1}' | xargs -r docker rm -f
                  docker images | grep -i "k8s" | awk '{print $3}' | xargs -r docker rmi -f
              fi
              
              # Clean up containerd data
              safe_remove "/var/lib/containerd"
          }

          # Main cleanup process
          echo -e "${YELLOW}Starting comprehensive Microk8s cleanup...${NC}"

          # Execute cleanup functions
          remove_snap_microk8s
          cleanup_systemd
          cleanup_network
          cleanup_user_config
          cleanup_remaining_files
          cleanup_docker_remnants

          echo -e "${GREEN}Microk8s cleanup completed successfully!${NC}"

    # Execute the safe iptables cleanup first to ensure we maintain connectivity
    - name: Safely reset iptables rules
      command: /tmp/cleanup-scripts/safe-iptables-cleanup.sh
      register: iptables_result
      changed_when: true

    - name: Display iptables cleanup results
      debug:
        var: iptables_result.stdout_lines

    # Now execute the MicroK8s cleanup script
    - name: Execute MicroK8s cleanup script
      command: /tmp/cleanup-scripts/microk8s-cleanup.sh
      register: microk8s_result
      changed_when: true
      ignore_errors: yes

    - name: Display MicroK8s cleanup results
      debug:
        var: microk8s_result.stdout_lines
      ignore_errors: yes

    # Clean up the hosts file entries
    - name: Remove cluster hosts entries
      blockinfile:
        path: /etc/hosts
        marker: "# {mark} ANSIBLE MANAGED BLOCK - CLUSTER NODES"
        state: absent
      ignore_errors: yes

    # Reset sysctl settings
    - name: Reset sysctl settings
      shell: |
        if [ -f /etc/sysctl.d/99-kubernetes.conf ]; then
          rm -f /etc/sysctl.d/99-kubernetes.conf
          sysctl --system
        fi
      ignore_errors: yes

    # Clear Ansible fact cache by creating a dummy file marker
    - name: Create fact reset marker
      file:
        path: /tmp/.ansible_facts_reset
        state: touch
        mode: "0644"

    # Reboot the system for a clean slate
    - name: Reboot system
      reboot:
        reboot_timeout: 600
        pre_reboot_delay: 15
        post_reboot_delay: 30
        test_command: uptime
      ignore_errors: yes
