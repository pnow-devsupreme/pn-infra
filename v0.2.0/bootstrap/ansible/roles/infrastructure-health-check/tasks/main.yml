---
# Infrastructure Health Check Role
# Performs comprehensive health checks on deployed infrastructure components

- name: Check Cilium CNI health
  block:
    - name: Verify Cilium DaemonSet status
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: DaemonSet
        name: cilium
        namespace: kube-system
      register: cilium_ds
      failed_when: cilium_ds.resources | length == 0 or cilium_ds.resources[0].status.numberReady != cilium_ds.resources[0].status.desiredNumberScheduled

    - name: Check Cilium operator health
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: cilium-operator
        namespace: kube-system
      register: cilium_operator
      failed_when: cilium_operator.resources | length == 0 or cilium_operator.resources[0].status.readyReplicas != cilium_operator.resources[0].status.replicas

    - name: Test pod-to-pod connectivity via Cilium
      kubernetes.core.k8s_exec:
        namespace: kube-system
        pod: "{{ (cilium_ds.resources[0].metadata.name if cilium_ds.resources else 'cilium') }}"
        container: cilium-agent
        command: cilium status --brief
      register: cilium_status
      failed_when: "'OK' not in cilium_status.stdout"
      ignore_errors: true

- name: Check NGINX Ingress health
  block:
    - name: Verify NGINX Ingress Controller deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: ingress-nginx-controller
        namespace: ingress-nginx
      register: nginx_deployment
      failed_when: nginx_deployment.resources | length == 0 or nginx_deployment.resources[0].status.readyReplicas != nginx_deployment.resources[0].status.replicas

    - name: Test NGINX Ingress health endpoint
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:30080/healthz"
        method: GET
        return_content: true
      register: nginx_health
      failed_when: nginx_health.status != 200

- name: Check Cert-Manager health
  block:
    - name: Verify Cert-Manager deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: cert-manager
        namespace: cert-manager
      register: cert_manager_deployment
      failed_when: cert_manager_deployment.resources | length == 0 or cert_manager_deployment.resources[0].status.readyReplicas != cert_manager_deployment.resources[0].status.replicas

    - name: Verify Cert-Manager webhook
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: cert-manager-webhook
        namespace: cert-manager
      register: cert_manager_webhook
      failed_when: cert_manager_webhook.resources | length == 0 or cert_manager_webhook.resources[0].status.readyReplicas != cert_manager_webhook.resources[0].status.replicas

- name: Check Vault health
  block:
    - name: Verify Vault StatefulSet
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: vault
        namespace: vault
      register: vault_statefulset
      failed_when: vault_statefulset.resources | length == 0

    - name: Check Vault pod status
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: vault
        label_selectors:
          - "app.kubernetes.io/name=vault"
        field_selectors:
          - "status.phase=Running"
      register: vault_pods
      failed_when: vault_pods.resources | length < 1

- name: Check ArgoCD health
  block:
    - name: Verify ArgoCD server deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: argocd-server
        namespace: argocd
      register: argocd_deployment
      failed_when: argocd_deployment.resources | length == 0 or argocd_deployment.resources[0].status.readyReplicas != argocd_deployment.resources[0].status.replicas

    - name: Verify ArgoCD application controller
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: argocd-application-controller
        namespace: argocd
      register: argocd_controller
      failed_when: argocd_controller.resources | length == 0

- name: Generate health report
  debug:
    msg:
      - "🏥 INFRASTRUCTURE HEALTH REPORT"
      - "================================"
      - "✅ Cilium CNI: {{ cilium_ds.resources[0].status.numberReady }}/{{ cilium_ds.resources[0].status.desiredNumberScheduled }} pods ready"
      - "✅ NGINX Ingress: {{ nginx_deployment.resources[0].status.readyReplicas }}/{{ nginx_deployment.resources[0].status.replicas }} replicas ready"
      - "✅ Cert-Manager: {{ cert_manager_deployment.resources[0].status.readyReplicas }}/{{ cert_manager_deployment.resources[0].status.replicas }} replicas ready"
      - "✅ Vault: {{ vault_pods.resources | length }} pod(s) running"
      - "✅ ArgoCD: {{ argocd_deployment.resources[0].status.readyReplicas }}/{{ argocd_deployment.resources[0].status.replicas }} replicas ready"
      - ""
      - "All critical infrastructure components are healthy! 🎉"