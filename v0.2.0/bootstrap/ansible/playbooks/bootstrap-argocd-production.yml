---
# Production ArgoCD Bootstrap Playbook
# Deploys ArgoCD with Helm, SSL, Ingress, and self-management capability

- name: Deploy ArgoCD for Production GitOps
  hosts: kube_control_plane[0]
  gather_facts: false
  become: false
  vars:
    kubectl_bin: kubectl
    kubeconfig_path: "{{ ansible_env.HOME }}/.kube/config"
    argocd_version: "5.51.6"  # Helm chart version
    argocd_domain: "{{ cluster_domain | default('pn.local') }}"
    argocd_hostname: "argocd.{{ argocd_domain }}"
    git_repo_url: "{{ git_repository_url | default('https://github.com/your-org/pn-infra.git') }}"
    git_repo_branch: "{{ git_repository_branch | default('main') }}"
    
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
    
  tasks:
    # ===========================================
    # PHASE 1: ARGOCD DEPLOYMENT
    # ===========================================
    - name: Phase 1 - Deploy ArgoCD with Helm
      block:
        - name: Check if ArgoCD is already installed
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: Deployment
            name: argocd-server
            namespace: argocd
          register: argocd_check
          
        - name: Add ArgoCD Helm repository
          kubernetes.core.helm_repository:
            name: argo
            repo_url: https://argoproj.github.io/argo-helm
          when: argocd_check.resources | length == 0
          
        - name: Create ArgoCD namespace
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: argocd
                labels:
                  name: argocd
                  app.kubernetes.io/name: argocd
          when: argocd_check.resources | length == 0
          
        - name: Deploy ArgoCD with production configuration
          kubernetes.core.helm:
            name: argocd
            chart_ref: argo/argo-cd
            release_namespace: argocd
            create_namespace: false
            chart_version: "{{ argocd_version }}"
            values:
              # Global configuration
              global:
                image:
                  repository: quay.io/argoproj/argocd
                  tag: v2.9.3
                  pullPolicy: IfNotPresent
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 999
                  runAsGroup: 999
                  fsGroup: 999
                nodeSelector:
                  kubernetes.io/os: linux
                
              # ArgoCD Configuration
              configs:
                params:
                  # Performance tuning for production
                  server.insecure: true  # We'll handle TLS at ingress level
                  controller.status.processors: 20
                  controller.operation.processors: 10
                  controller.self.heal.timeout.seconds: 5
                  controller.repo.server.timeout.seconds: 60
                  
                cm:
                  # Enable resource tracking with annotations
                  application.resourceTrackingMethod: annotation
                  
                  # Enable exec for debugging (can be disabled for production)
                  exec.enabled: "true"
                  
                  # Configure OIDC (can be enabled later with Vault)
                  oidc.config: |
                    name: OIDC
                    issuer: https://vault.{{ argocd_domain }}/v1/identity/oidc/provider/default
                    clientId: argocd
                    clientSecret: $oidc.vault.clientSecret
                    requestedScopes: ["openid", "profile", "email", "groups"]
                    requestedIDTokenClaims: {"groups": {"essential": true}}
                    
                  # Resource exclusions for better performance
                  resource.exclusions: |
                    - apiGroups:
                      - "cilium.io"
                      kinds:
                      - "CiliumIdentity"
                      clusters:
                      - "*"
                    - apiGroups:
                      - "cilium.io"  
                      kinds:
                      - "CiliumEndpoint"
                      clusters:
                      - "*"
                      
                  # URL configuration
                  url: https://{{ argocd_hostname }}
                  
                rbac:
                  # Default policy - all authenticated users get read access
                  policy.default: role:readonly
                  
                  # Admin policy
                  policy.csv: |
                    p, role:admin, applications, *, */*, allow
                    p, role:admin, clusters, *, *, allow
                    p, role:admin, repositories, *, *, allow
                    p, role:admin, certificates, *, *, allow
                    p, role:admin, accounts, *, *, allow
                    p, role:admin, gpgkeys, *, *, allow
                    p, role:admin, logs, get, */*, allow
                    p, role:admin, exec, create, */*, allow
                    
                    g, argocd-admins, role:admin
                    
              # Server configuration
              server:
                replicas: 2
                
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                  limits:
                    cpu: 500m
                    memory: 512Mi
                    
                autoscaling:
                  enabled: false
                  minReplicas: 2
                  maxReplicas: 5
                  targetCPUUtilizationPercentage: 50
                  targetMemoryUtilizationPercentage: 50
                  
                service:
                  type: ClusterIP
                  servicePortHttp: 80
                  servicePortHttps: 443
                  
                ingress:
                  enabled: true
                  ingressClassName: nginx
                  hostname: "{{ argocd_hostname }}"
                  annotations:
                    nginx.ingress.kubernetes.io/ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
                    nginx.ingress.kubernetes.io/server-snippet: |
                      grpc_read_timeout 300;
                      grpc_send_timeout 300;
                      client_body_timeout 60;
                      client_header_timeout 60;
                      client_max_body_size 1m;
                    cert-manager.io/cluster-issuer: letsencrypt-production
                  tls:
                    - secretName: argocd-server-tls
                      hosts:
                        - "{{ argocd_hostname }}"
                        
                config:
                  # Application in any namespace
                  application.instanceLabelKey: argocd.argoproj.io/instance
                  
                extraArgs:
                  - --insecure  # TLS handled by ingress
                  
              # Application Controller configuration  
              controller:
                replicas: 1
                
                resources:
                  requests:
                    cpu: 500m
                    memory: 512Mi
                  limits:
                    cpu: 1000m
                    memory: 1Gi
                    
                metrics:
                  enabled: true
                  serviceMonitor:
                    enabled: false  # Enable when Prometheus is deployed
                    
              # Repository Server configuration
              repoServer:
                replicas: 2
                
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                  limits:
                    cpu: 500m
                    memory: 512Mi
                    
                metrics:
                  enabled: true
                  serviceMonitor:
                    enabled: false  # Enable when Prometheus is deployed
                    
              # ApplicationSet Controller
              applicationSet:
                enabled: true
                replicas: 1
                
                resources:
                  requests:
                    cpu: 100m
                    memory: 128Mi
                  limits:
                    cpu: 200m
                    memory: 256Mi
                    
              # Notifications Controller (for advanced GitOps workflows)
              notifications:
                enabled: true
                
                resources:
                  requests:
                    cpu: 100m
                    memory: 128Mi
                  limits:
                    cpu: 200m
                    memory: 256Mi
                    
              # Redis for caching
              redis:
                enabled: true
                
                resources:
                  requests:
                    cpu: 100m
                    memory: 128Mi
                  limits:
                    cpu: 200m
                    memory: 256Mi
                    
              # Redis HA (disable for now, enable for larger deployments)
              redis-ha:
                enabled: false
                
          when: argocd_check.resources | length == 0
          
        - name: Wait for ArgoCD server deployment to be ready
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: Deployment
            name: argocd-server
            namespace: argocd
            wait: true
            wait_condition:
              type: Available
              status: "True"
            wait_timeout: 300
            
        - name: Wait for ArgoCD application controller to be ready
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: StatefulSet
            name: argocd-application-controller
            namespace: argocd
            wait: true
            wait_condition:
              type: Ready
              status: "True"
            wait_timeout: 300

    # ===========================================
    # PHASE 2: CERTIFICATE CONFIGURATION
    # ===========================================
    - name: Phase 2 - Configure TLS Certificate
      block:
        - name: Create ClusterIssuer for Let's Encrypt (production)
          kubernetes.core.k8s:
            definition:
              apiVersion: cert-manager.io/v1
              kind: ClusterIssuer
              metadata:
                name: letsencrypt-production
              spec:
                acme:
                  server: https://acme-v02.api.letsencrypt.org/directory
                  email: admin@{{ argocd_domain }}
                  privateKeySecretRef:
                    name: letsencrypt-production
                  solvers:
                  - http01:
                      ingress:
                        class: nginx
                        
        - name: Create ClusterIssuer for Let's Encrypt (staging)
          kubernetes.core.k8s:
            definition:
              apiVersion: cert-manager.io/v1
              kind: ClusterIssuer
              metadata:
                name: letsencrypt-staging
              spec:
                acme:
                  server: https://acme-staging-v02.api.letsencrypt.org/directory
                  email: admin@{{ argocd_domain }}
                  privateKeySecretRef:
                    name: letsencrypt-staging
                  solvers:
                  - http01:
                      ingress:
                        class: nginx
                        
        - name: Wait for certificate to be ready
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            name: argocd-server-tls
            namespace: argocd
          register: argocd_tls_secret
          until: argocd_tls_secret.resources | length > 0
          retries: 30
          delay: 10

    # ===========================================
    # PHASE 3: REPOSITORY CONFIGURATION
    # ===========================================
    - name: Phase 3 - Configure Git Repository Access
      block:
        - name: Get ArgoCD admin password
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            name: argocd-initial-admin-secret
            namespace: argocd
          register: argocd_secret
          until: argocd_secret.resources | length > 0
          retries: 30
          delay: 10
          
        - name: Set ArgoCD admin password variable
          set_fact:
            argocd_admin_password: "{{ argocd_secret.resources[0].data.password | b64decode }}"
            
        - name: Login to ArgoCD CLI
          kubernetes.core.k8s_exec:
            namespace: argocd
            pod: "{{ argocd_server_pod.resources[0].metadata.name }}"
            command: >
              argocd login argocd-server.argocd.svc.cluster.local:80
              --username admin
              --password {{ argocd_admin_password }}
              --insecure
          vars:
            argocd_server_pod: "{{ lookup('kubernetes.core.k8s', api_version='v1', kind='Pod', namespace='argocd', label_selector='app.kubernetes.io/name=argocd-server') }}"
            
        - name: Add Git repository to ArgoCD
          kubernetes.core.k8s_exec:
            namespace: argocd
            pod: "{{ argocd_server_pod.resources[0].metadata.name }}"
            command: >
              argocd repo add {{ git_repo_url }}
              --name pn-infra
              --insecure-skip-server-verification
          vars:
            argocd_server_pod: "{{ lookup('kubernetes.core.k8s', api_version='v1', kind='Pod', namespace='argocd', label_selector='app.kubernetes.io/name=argocd-server') }}"
          ignore_errors: true  # Repository might already exist

    # ===========================================
    # PHASE 4: SELF-MANAGEMENT SETUP
    # ===========================================
    - name: Phase 4 - Configure ArgoCD Self-Management
      block:
        - name: Create ArgoCD self-management application
          kubernetes.core.k8s:
            definition:
              apiVersion: argoproj.io/v1alpha1
              kind: Application
              metadata:
                name: argocd-self
                namespace: argocd
                annotations:
                  argocd.argoproj.io/sync-wave: "0"
                finalizers:
                  - resources-finalizer.argocd.argoproj.io
              spec:
                project: default
                source:
                  repoURL: https://argoproj.github.io/argo-helm
                  chart: argo-cd
                  targetRevision: "{{ argocd_version }}"
                  helm:
                    valueFiles: []
                    values: |
                      # Self-managed ArgoCD configuration
                      # This will be enhanced with proper values from Git repository
                      configs:
                        params:
                          server.insecure: true
                      server:
                        ingress:
                          enabled: true
                          ingressClassName: nginx
                          hostname: {{ argocd_hostname }}
                          annotations:
                            cert-manager.io/cluster-issuer: letsencrypt-production
                          tls:
                            - secretName: argocd-server-tls
                              hosts:
                                - {{ argocd_hostname }}
                destination:
                  server: https://kubernetes.default.svc
                  namespace: argocd
                syncPolicy:
                  automated:
                    prune: true
                    selfHeal: true
                  syncOptions:
                    - CreateNamespace=false
                    - PrunePropagationPolicy=foreground
                    - PruneLast=true
                  retry:
                    limit: 5
                    backoff:
                      duration: 5s
                      factor: 2
                      maxDuration: 3m
                      
        - name: Create infrastructure project
          kubernetes.core.k8s:
            definition:
              apiVersion: argoproj.io/v1alpha1
              kind: AppProject
              metadata:
                name: infrastructure
                namespace: argocd
              spec:
                description: Infrastructure components and platform services
                sourceRepos:
                  - "{{ git_repo_url }}"
                  - "https://helm.cilium.io/"
                  - "https://kubernetes.github.io/ingress-nginx"
                  - "https://charts.jetstack.io"
                  - "https://helm.releases.hashicorp.com"
                  - "https://charts.rancher.io"
                  - "https://rook.github.io/charts"
                destinations:
                  - namespace: "*"
                    server: https://kubernetes.default.svc
                clusterResourceWhitelist:
                  - group: "*"
                    kind: "*"
                namespaceResourceWhitelist:
                  - group: "*"
                    kind: "*"
                roles:
                  - name: infrastructure-admin
                    description: Admin access to infrastructure project
                    policies:
                      - p, proj:infrastructure:infrastructure-admin, applications, *, infrastructure/*, allow
                    groups:
                      - argocd-admins

    # ===========================================
    # FINAL VERIFICATION
    # ===========================================
    - name: Final ArgoCD Verification
      block:
        - name: Verify ArgoCD API accessibility
          uri:
            url: "https://{{ argocd_hostname }}/api/version"
            method: GET
            validate_certs: false
            return_content: true
          register: argocd_api_test
          retries: 10
          delay: 15
          until: argocd_api_test.status == 200
          
        - name: Display ArgoCD deployment summary
          debug:
            msg:
              - "🎉 ARGOCD PRODUCTION DEPLOYMENT COMPLETE!"
              - ""
              - "✅ ArgoCD Server: Deployed with HA (2 replicas)"
              - "✅ Application Controller: Deployed and ready"
              - "✅ Repository Server: Deployed with HA (2 replicas)"
              - "✅ TLS Certificate: Configured with Let's Encrypt"
              - "✅ Ingress: Configured with NGINX and SSL"
              - "✅ Self-Management: Application created"
              - "✅ Repository: {{ git_repo_url }} configured"
              - ""
              - "🔗 ACCESS INFORMATION:"
              - "• ArgoCD UI: https://{{ argocd_hostname }}"
              - "• Username: admin"
              - "• Password: {{ argocd_admin_password }}"
              - ""
              - "📝 NEXT STEPS:"
              - "1. Access ArgoCD UI and verify login"
              - "2. Configure additional Git repositories" 
              - "3. Deploy infrastructure and application projects"
              - "4. Set up RBAC and user management"
              - ""
              - "ArgoCD is now ready for GitOps workflows!"