---
# Global configuration
global:
  repoURL: https://github.com/pnow-devsupreme/pn-infra.git
  targetRevision: 'main'

# Common annotations - informational metadata (not used for selection)
commonAnnotations:
  platform.pnats.cloud/owner: 'Shaik Noorullah'
  platform.pnats.cloud/owner-email: 'snoorullah@proficientnowtech.com'
  platform.pnats.cloud/docs: 'docs.pnats.cloud/config-charts/#argocd-config'
  platform.pnats.cloud/git-commit: HEAD
  platform.pnats.cloud/release-id: manual-deploy

# Common labels - applied to all resources (valid label values only)
commonLabels:
  platform.pnats.cloud/org: ProficientNowTech
  platform.pnats.cloud/chart-version: 0.1.0
  platform.pnats.cloud/maintained-by: platform-team

# Common selectors - used for selecting/matching resources
commonSelectors:
  app.kubernetes.io/part-of: argocd-app
  app.kubernetes.io/managed-by: argocd
  app.kubernetes.io/version: v3.1.8
  platform.pnats.cloud/layer: platform
  platform.pnats.cloud/environment: production
  platform.pnats.cloud/tier: critical
  platform.pnats.cloud/team: platform-team
  platform.pnats.cloud/monitoring-enabled: "true"
  platform.pnats.cloud/backup-policy: daily
  platform.pnats.cloud/cost-center: platform-ops

# ArgoCD namespace
argocd:
  namespace: argocd

## Ingress configuration
ingress:
  enabled: true  # argocd-config manages the ingress
  # Resource-specific labels (merged with commonLabels)
  labels:
    app.kubernetes.io/name: argocd-server-ingress
    app.kubernetes.io/component: ingress-config
  name: argocd-server-ingress
  ingressClassName: nginx
  hostname: argocd.pnats.cloud
  path: /
  pathType: Prefix
  serviceName: argocd-server
  servicePort: 80

  # TLS configuration
  tls:
    enabled: true
    secretName: argocd.pnats.cloud-tls

  # Ingress annotations
  annotations:
    kubernetes.io/ingress.class: nginx
    external-dns.alpha.kubernetes.io/hostname: argocd.pnats.cloud
    cert-manager.io/cluster-issuer: letsencrypt-production
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/server-snippet: |
      client_body_timeout 60;
      client_header_timeout 60;
      client_max_body_size 10m;

## ArgoCD ConfigMap (argocd-cm) configuration
configMap:
  enabled: false  # Disabled - ArgoCD Helm chart manages argocd-cm, configure via Helm values instead

  # Resource-specific labels (merged with commonLabels)
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/component: server-config

  # Status badge configuration
  statusbadge:
    enabled: true

  # Exec into pods configuration
  exec:
    enabled: true

  # Application configuration
  application:
    instanceLabelKey: argocd.argoproj.io/instance

  # Server configuration
  server:
    insecure: true
    grpcWeb: true

  # Timeout configuration
  timeout:
    reconciliation: 180s
    hardReconciliation: 0s

  # Helm repositories
  repositories:
  - type: helm
    url: https://argoproj.github.io/argo-helm
    name: argo
  - type: helm
    url: https://charts.rook.io/release
    name: rook-release
  - type: helm
    url: https://helm.releases.hashicorp.com
    name: hashicorp
  - type: helm
    url: https://prometheus-community.github.io/helm-charts
    name: prometheus-community
  - type: helm
    url: https://grafana.github.io/helm-charts
    name: grafana
  - type: helm
    url: https://ray-project.github.io/kuberay-helm/
    name: kuberay
  - type: helm
    url: https://helm.ngc.nvidia.com/nvidia
    name: nvidia
  # Resource customizations (health checks, etc.)
  resourceCustomizations:
    argoproj.io/Application:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
