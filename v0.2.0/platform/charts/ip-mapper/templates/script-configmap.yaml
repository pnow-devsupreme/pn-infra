---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ip-mapper-script
  namespace: {{ .Values.namespace }}
data:
  update-targets.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "[INFO] Starting IP mapper for external-dns targets..."

    # Load IP mappings from ConfigMap
    MAPPINGS=$(kubectl get configmap ip-mapping -n {{ .Values.namespace }} -o jsonpath='{.data.mappings}')

    if [[ -z "$MAPPINGS" ]]; then
        echo "[ERROR] Failed to load IP mappings from ConfigMap"
        exit 1
    fi

    # Parse mappings into associative array
    declare -A IP_MAP
    while IFS='=' read -r internal_ip public_ip; do
        [[ -z "$internal_ip" || "$internal_ip" =~ ^# ]] && continue
        IP_MAP["$internal_ip"]="$public_ip"
    done <<< "$MAPPINGS"

    echo "[INFO] Loaded ${#IP_MAP[@]} IP mappings"

    # Get all ingresses with external-dns hostname annotation
    echo "[INFO] Fetching all ingresses..."
    INGRESSES=$(kubectl get ingress -A -o json) || {
        echo "[ERROR] Failed to fetch ingresses"
        exit 1
    }

    echo "[INFO] Processing ingresses..."
    PROCESSED=0
    UPDATED=0
    SKIPPED=0

    # Process each ingress
    while IFS='|' read -r namespace name lb_ip hostname; do
        echo "[DEBUG] Processing: $namespace/$name | IP:$lb_ip | Host:$hostname"
        [[ -z "$namespace" ]] && continue
        ((PROCESSED++))

        # Skip if no external-dns hostname annotation
        if [[ -z "$hostname" ]]; then
            echo "[INFO] Skipping $namespace/$name - no external-dns hostname annotation"
            ((SKIPPED++))
            continue
        fi

        # Skip if no LoadBalancer IP
        if [[ -z "$lb_ip" || "$lb_ip" == "null" ]]; then
            echo "[WARN] Skipping $namespace/$name - no LoadBalancer IP assigned yet"
            ((SKIPPED++))
            continue
        fi

        # Get mapped public IP
        PUBLIC_IP="${IP_MAP[$lb_ip]:-}"
        if [[ -z "$PUBLIC_IP" ]]; then
            echo "[WARN] Skipping $namespace/$name - no public IP mapping for $lb_ip"
            ((SKIPPED++))
            continue
        fi

        # Check current annotation
        CURRENT_TARGET=$(kubectl get ingress "$name" -n "$namespace" -o jsonpath='{.metadata.annotations.external-dns\.alpha\.kubernetes\.io/target}' 2>/dev/null || echo "")

        if [[ "$CURRENT_TARGET" == "$PUBLIC_IP" ]]; then
            echo "[INFO] $namespace/$name already has correct target: $PUBLIC_IP"
            continue
        fi

        # Update annotation
        echo "[INFO] Updating $namespace/$name: $lb_ip â†’ $PUBLIC_IP"
        if kubectl annotate ingress "$name" -n "$namespace" \
            "external-dns.alpha.kubernetes.io/target=$PUBLIC_IP" --overwrite; then
            echo "[SUCCESS] Updated $namespace/$name target to: $PUBLIC_IP"
            ((UPDATED++))
        else
            echo "[ERROR] Failed to update $namespace/$name"
        fi

    done < <(echo "$INGRESSES" | jq -r '.items[] | "\(.metadata.namespace)|\(.metadata.name)|\(.status.loadBalancer.ingress[0].ip // "")|\(.metadata.annotations["external-dns.alpha.kubernetes.io/hostname"] // "")"')

    echo "[INFO] Processed: $PROCESSED | Updated: $UPDATED | Skipped: $SKIPPED"
    echo "[SUCCESS] IP mapper completed successfully"
